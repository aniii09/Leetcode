class Solution {
public:
    //code Aniiii
    static int longestSubarray(vector<int>& nums) {
        const int n=nums.size();
        int maxLen=0, xMax=0, len=0;
        for(int i=0; i<n; i++){
            while(i<n && nums[i]==xMax){
                i++;
                len++;
            }
            if (i==n) {
                maxLen=max(maxLen, len);
                break;
            }
            int x=nums[i];
            if (x>xMax){
                xMax=x;
                maxLen=len=1;
            }
            else if (x<xMax) {
                maxLen = max(maxLen, len);
                len=0;
            }
        }
        return maxLen;
    }
};

-------------------------------------------------------------------------------------------

qs-

You are given an integer array nums of size n.

Consider a non-empty subarray from nums that has the maximum possible bitwise AND.

In other words, let k be the maximum value of the bitwise AND of any subarray of nums. Then, only subarrays with a bitwise AND equal to k should be considered.
Return the length of the longest such subarray.

The bitwise AND of an array is the bitwise AND of all the numbers in it.

A subarray is a contiguous sequence of elements within an array.

 

Example 1:

Input: nums = [1,2,3,3,2,2]
Output: 2
Explanation:
The maximum possible bitwise AND of a subarray is 3.
The longest subarray with that value is [3,3], so we return 2.
Example 2:

Input: nums = [1,2,3,4]
Output: 1
Explanation:
The maximum possible bitwise AND of a subarray is 4.
The longest subarray with that value is [4], so we return 1.
 

Constraints:

1 <= nums.length <= 105
1 <= nums[i] <= 106
