class Solution {
public:
    static int cntPairs(int x, vector<int>& nums){//sliding window
        const int n=nums.size();
        int cnt=0;
        for(int l=0, r=1; r<n; r++){
            while(r>l && nums[r]-nums[l]>x)
                l++;
            cnt+=r-l;
        }
        return cnt;
    }

    static int smallestDistancePair(vector<int>& nums, int k) {
        sort(nums.begin(), nums.end());
        const int M=nums.back();
        
        // Code Aniii
        int l=0, r=M, m;
        while(l<r){
            m=(r+l)/2;
            if (cntPairs(m, nums)<k)
                l=m+1;
            else r=m;
        }
        return l;
    }
};


 
auto init = []() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);
    cout.tie(nullptr);
    return 'c';
}();

-------------------------------------------------------------------------------------------------------------------------------------

QS-

The distance of a pair of integers a and b is defined as the absolute difference between a and b.

Given an integer array nums and an integer k, return the kth smallest distance among all the pairs nums[i] and nums[j] where 0 <= i < j < nums.length.

 

Example 1:

Input: nums = [1,3,1], k = 1
Output: 0
Explanation: Here are all the pairs:
(1,3) -> 2
(1,1) -> 0
(3,1) -> 2
Then the 1st smallest distance pair is (1,1), and its distance is 0.
Example 2:

Input: nums = [1,1,1], k = 2
Output: 0
Example 3:

Input: nums = [1,6,1], k = 3
Output: 5
 

Constraints:

n == nums.length
2 <= n <= 104
0 <= nums[i] <= 106
1 <= k <= n * (n - 1) / 2
