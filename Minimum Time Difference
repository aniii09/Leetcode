class Solution {
public:
//code Aniii
    static int findMinDifference(vector<string>& timePoints) {
        const int N=24*60, H=12*60;
        int minX=N, maxX=0;
        bitset<N> seen=0;
        for(string& s: timePoints){
            int x=((s[0]-'0')*10+s[1]-'0')*60+(s[3]-'0')*10+(s[4]-'0');
            if (seen[x]) return 0;
            seen[x]=1;
            minX=min(x, minX);
            maxX=max(x, maxX);
        }
        int diff=N, prev=minX;
        for(int x=minX+1; x<=maxX; x++){
            if (!seen[x]) continue;
            diff=min(diff, x-prev);
            prev=x;
        }
        diff=min(N-(maxX-minX), diff);
        return diff;
    }
};
auto init = []() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);
    cout.tie(nullptr);
    return 'c';
}();

------------------------------------------------------------------------------------------

qs-

Given a list of 24-hour clock time points in "HH:MM" format, return the minimum minutes difference between any two time-points in the list.
 

Example 1:

Input: timePoints = ["23:59","00:00"]
Output: 1
Example 2:

Input: timePoints = ["00:00","23:59","00:00"]
Output: 0
 

Constraints:

2 <= timePoints.length <= 2 * 104
timePoints[i] is in the format "HH:MM".
