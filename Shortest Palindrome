class Solution {
public:
//code Aniii
    string shortestPalindrome(string s) {
        const int n = s.size();
        int i = 0;
        for (int j=n-1; j>= 0; j--) {
            while (j>=0 && s[i] == s[j])
                i++, j--;
        }
        if (i==n) 
            return s;
        string sub= s.substr(i), remain_rev=sub;
        reverse(remain_rev.begin(), remain_rev.end());
        return remain_rev + shortestPalindrome(s.substr(0, i)) + sub;
    }
};
auto init = []() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);
    cout.tie(nullptr);
    return 'c';
}();

-------------------------------------------------------------------------------------------------------------

qs-

You are given a string s. You can convert s to a 
palindrome
 by adding characters in front of it.

Return the shortest palindrome you can find by performing this transformation.

 

Example 1:

Input: s = "aacecaaa"
Output: "aaacecaaa"
Example 2:

Input: s = "abcd"
Output: "dcbabcd"
 

Constraints:

0 <= s.length <= 5 * 104
s consists of lowercase English letters only.
